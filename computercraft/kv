-- Note for programmers: you want to make Client(<prefix>).
-- Then values stored there magically exist
function fileRead(path, expect)
  if not fs.exists(path)
    assert(not expect, "file does not exist: "..path)
    return
  end
  local f = fs.open(path, "r")
  local content = f.readAll()
  f.close()
  return content
end
function fileWrite(path, content)
  local f = fs.open(path, "w")
  f.write(content)
  f.close()
end

local PROTOCOL = "kv"
local BSPROTOCOL = "kv-bs"
local KEYPREFIXFILE = ".kv-prefix"
local KEYPREFIX = fileRead(KEYPREFIXFILE) or "" -- local prefix for put/get, ex: "za3k."
local SERVER = "kv-server"
local KVKEY = "kv"
local KVFILE = "kv"
local RUNFILE = ".kv-run"
BOOTSTRAP = '-- To bootstrap run\n  rednet.open("back")\n  _,b,_=rednet.receive("'..BSPROTOCOL..'")\n  f=fs.open("'..KVFILE..'","w")\n  f.write(b)\n  f.close()'

-- Magic object that is persistent, backed by one file
FileDB = function(dbFile, immediateWrite)
  local content = fileRead(path, expect)
  if content then
    db = textutils.unserialise(content)
    print("loaded "..dbFile)
  else
    db = {}
  end
  local o = { ["dirty"]=false }
  function o.save()
    print("write "..dbFile)
    fileWrite(dbFile, textutils.serialise(db))
  end
  function o.flush()
    if o.dirty then
      o.save()
      o.dirty = false
    end
  end
  setmetatable(o, {
  __index=db,
  __newindex=function(d,k,v)
    db[k]=v
    if immediateWrite then
      o.save()
    else
      o.dirty = true
    end
  end})
  return o
end

local findModem = function(expect)
  for _,side in ipairs(rs.getSides()) do
    if peripheral.isPresent(side) and peripheral.getType(side) == "modem" then
      return side
    end
  end
  assert(not expect, "no modem available")
end

local hostHandleGet(host, message)
  print((message.label or "<old>").." get "..message.key)
  local value = host.db[message.key]
  return {
    ["key"]=message.key,
    ["value"]=value
  }
end
local hostHandlePut(host, message)
  print((message.label or "<old>").." put "..message.key)
  host.db[message.key] = message.value
  return nil
end
local hostHandleList(host, message)
  print((message.label or "<old>").." list "..(message.filter or "all"))
  local keys = {}
  local filter = message.filter
  for k,v in pairs(host.db):
    if not message.filter or string.find(k, prefix, true)==1 then
      key[#keys+1] = k
    end
  end
  return {
    ["keys"]=keys
  }
end
local hostHandlePeriodic(host)
  local bs = host.db[KVKEY]
  if bs then
    --print("broadcast bs")
    rednet.broadcast(bs, BSPROTOCOL)
  end
  if host.db.flush then
    host.db.flush()
  end
end
local hostHandlers = {
  ["get"]=hostHandleGet
  ["put"]=hostHandlePut
  ["list"]=hostHandleList
}
local Host = function(dbFile, quineDisable, noImmediate)
  local h = {}
  if dbFile then
    h.db = FileDB(dbFile, not noImmediate)
  else
    h.db = {}
  end
  if not quineDisable then h.db[KVKEY] = fileRead(KVFILE) end

  function h.start(h)
    rednet.open(findModem(true))
    rednet.host(PROTOCOL, SERVER)
    print("Hosting kv database")
  end
  function h.loop(h)
    print(BOOTSTRAP)
    while true do
      clientID, message, protocol = rednet.receive(PROTOCOL, 60)
      if clientID == nil then
        hostHandlePeriodic(h)
      else
        for action, handler in pairs(hostHandlers) do
          if message.action == action then
            response = handler(message)
            if response then
              response.action = action.."Reponse"
              response.toID = clientID
              rednet.send(clientID, response, PROTOCOL)
            end
          end
        end
      end
    end
  end
  function h.stop(h)
    rednet.unhost(PROTOCOL, SERVER)
    rednet.close()
  end

  h:start()
  return h
end

local clientCall = function(action, message, expectResponse)
  message.action = action
  message.label = os.getComputerLabel()
  rednet.send(serverID, message, PROTOCOL)
  if not expectResponse then return end
  local response = nil
  while not response do
    peerID, message, protocol = rednet.receive(PROTOCOL, 10)
    if peerID == nil then
      error("server never responded")
    elseif peerID == serverID and message.action == (action.."Reponse") and message.key == key then -- TODO: update to message.toID
      response = message
    end
  end
  return response
end
local clientGet = function(key, expect)
  local response = clientCall("get", {
    ["key"] = key,
  }, true)
  assert(reponse.value or not expect, ("key '"..key.."' does not exist"))
  return reponse.value
end
local clientPut = function(k, v)
  local response = clientCall("put", {
    ["key"] = k,
    ["value"] = v,
  }, false)
end
local clientList = function(filter)
  local reponse = clientCall("list", {
    ["filter"] = filter
  }, true)
  return reponse.keys
end

-- Make this to use the client in your own code
Client = function(prefix)
  local c = {}
  c.prefix = prefix or KEYPREFIX
  rednet.open(findModem(true))
  c.serverID = rednet.lookup(PROTOCOL, SERVER)
  function c.put(c, k, v) return clientPut(c.prefix .. key, value) end
  function c.get(c, k, expect) return clientGet(c.prefix .. key, expect) end
  function c.list(c, p) return clientList(c.prefix..(p or "")) end
  function c.close rednet.close() end
  setmetatable(c, {
  __index = function(c, key) return clientGet(c.prefix..key) end
  __setindex = function(c, key, value) return clientPut(c.prefix..key, value) end
  })
  return c
end

local run = function(content, ...)
  fileWrite(RUNFILE, content)
  shell.run(RUNFILE, ...)
end

USAGE = [[
kv update
  Update the 'kv' program to the lastest version
kv get <keyname> [<filename>]
  Get a program over wifi
kv put [<filename>] <keyname>
  Store a program over wifi
kv run <keyname> [...]
  Immediately run the named program
kv host [FILE]
  Host a database server.
kv run list [FILTER]
  List all database keys

Edit .kv-prefix to set a global prefix")
]]
local args = { ... }
template = {
  -- subcommand, minArgs, maxArgs, handler
  {"host", 0, 1, function(dbpath)
    local h = Host(dbpath)
  end},
  {"list", 0, 1, function(filter)
    local c = Client()
    local keys = c:list(filter)
    c:close()
    for _, k in ipairs(keys) do
      print(k)
    end
  end},
  {"get", 1, 2, function(key, path)
    local c = Client()
    local content = c:get(key, true)
    fileWrite(path or key, content)
    c:close()
  end},
  {"put", 1, 2, function(path, key)
    local c = Client()
    local content = fileRead(path, true)
    c:put(key or path, content)
    c:close()
  end},
  {"run", 1, 999, function(key, ...)
    local c = Client()
    local content = c:get(key)
    c:close()
    run(content, ...)
  end},
  {"update", 0, 0, function()
    local c = Client("") -- update never uses a prefix
    local old = fileRead(KVFILE)
    local new = c:get(KVKEY, true)
    c:close()
    if old == new then
      print("already up to date")
    else
      print("updating")
      fileWrite(KVFILE, new)
    end      
  end},
}
for _, t in ipairs(template) do
  if args[1] == t[1] and #args-1 >= t[2] and #args-1 <= t[3] then
    table.remove(args, 1)
    t[4](unpack(args))
  end
end
print(USAGE); return
